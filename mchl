#!/usr/bin/env perl
# --------------------------------------------------
# Script which when given minecraft log, highlights user chatting and
# login/logoff with unique and persistent colors.
#
# Usage:
#   hl /path/to/logs/latest.log
#
# It can be passed through less, like so:
#   hl /path/to/logs/latest.log | less -R
#
# And used together with docker logs
#   docker logs <world> -f | hl
#
# --------------------------------------------------
# Mattias Jansson <fimblo@yanson.org>
# --------------------------------------------------

# --------------------------------------------------
# Debug code.
# If MC_CL envvar is set to 'DEBUG_COLOR', then
# this code will output color-coded usernames and exit.
#my $DEBUG;
#if (%ENV{'MC_CL'} eq 'DEBUG_COLOR') { $DEBUG=1; }

# --------------------------------------------------
# Here starts the saga
use MIME::Base64 qw(encode_base64);
use strict;

# user to color mapping is kept here
my $color_code = {};
my $test_rgb = {}; # debug hash

# Ansi terminal escape sequence to revert all color-coding
my $reset_color = "\033[0m";

#if ($DEBUG == 1) { &test_colors(); }

# Main loop
while (<>) {
  &colorize($_);
}





# ==================================================
# Subs

# --------------------------------------------------
# Figure out what color a user should get, and store it in the hash
# $color_code. If the user-color mapping already exists, do nothing.
sub determine_user_color {
  my $user = $_[0];
  return if (exists($color_code->{$user}));

  sub R { 0; } # Local helper functions
  sub G { 1; } # acting as a kind of 
  sub B { 2; } # poor-man's enumerations
  
  # Minimize number of possible chars in username
  # Total possibilities is now 26
  my $id = uc $user;       # upper case
  $id =~ s/[^A-Z]//g;      # strip non alphas
  $id =~ $id.$id.$id.$id ; # extend string size for short ids

  # Convert base64 to ascii decimal.
  my @n =
    map { $_ * 10 } # numbers 0-250
    map { $_ % 26 } # numbers 0-25
    map { ord }     # numbers 65-90
  split('', $id);


  # Modify RGB values if...
  my $range = 40;
  if ((abs($n[R] - $n[G] ) < $range  &&  # ... the RGB values are too
       abs($n[G] - $n[B] ) < $range  &&  # close, to each other (let's
       abs($n[B] - $n[R] ) < $range )    # avoid grey right?)
      ||
      ( $n[R] < 40 &&                    # ... the RGB combo is too
        $n[G] < 40 &&                    # dark.
        $n[B] < 40 ) ) {
    my $index = ($n[4]/3) % 3;
    $n[$index] = ($n[$index] + 100) % 256;
  }


  # Blue is a pain, since most terminals have a black background.
  # The blue which is hard to see has high B and low G values.
  if ($n[B] > 200 && $n[G] < 80) {
    $n[G] += 80;
  }

  $test_rgb -> {$user} -> {'r'} = $n[R];
  $test_rgb -> {$user} -> {'g'} = $n[G];
  $test_rgb -> {$user} -> {'b'} = $n[B];

  # enter color code for this user to map
  $color_code->{$user} = join ('',
                             (
                              "\033[38;2;",   # Initiate color-coding
                              $n[R] , ";", # red
                              $n[G] , ";", # green
                              $n[B] , "m"  # blue
                             ));
  return;
}


# --------------------------------------------------
# Color-code if the line contains a chat message or if a user logs in
# or logs out. Otherwise, print line as-is.
sub colorize {
  my $line = $_[0];
  chomp $line; # remove newline

  my ($prefix, $username, $message);
  if ($line =~ m|^(.*?\[Server thread/INFO\]: )<(.*?)>(.*?)$|) {
    $prefix   = $1;
    $username = $2;
    $message  = $3;

    &determine_user_color($username);

    print
      $prefix .
      $color_code->{$username} .
      "<$username>" . 
      $message . 
      $reset_color . "\n";
      
  }
  elsif ($line =~ m|^(.*?\[Server thread/INFO\]:) (.*?) (.*? the game)$|) {
    $prefix   = $1;
    $username = $2;
    $message  = $3;

    &determine_user_color($username);

    print
      $prefix .
      $color_code->{$username} .
      " $username " . 
      $message . 
      $reset_color . "\n";
    

}
  else {
    print $line . "\n";
  }
}


# Debug code.
# Called only if envvar MC_CL is set to 'DEBUG_COLORS'.
sub test_colors() {
  my @usernames = qw/BomberThug
    ekniberg
    Etshiko
    fimblo
    Framistan
    Maartini
    Pandie_
    Quint_
    Svantius
    Trrookk1000
    Wolf_Tail/;

  for my $u (@usernames) {
    &determine_user_color($u);

        print
          $color_code->{$u} .
          "$u" . 
          $reset_color .
          "\tR:" . $test_rgb->{$u}->{'r'} .
          " G:" . $test_rgb->{$u}->{'g'} .
          " B:" . $test_rgb->{$u}->{'b'} .
          "\n";
          
  }

  exit 0;
}

#print "\033[38;2;255;82;197;48;2;155;106;0mHello\033[0m\n";
